{
  "name": "mammoth",
  "version": "0.1.5",
  "author": {
    "name": "Michael Williamson",
    "email": "mike@zwobble.org"
  },
  "description": "Convert Word documents to simple HTML",
  "keywords": [
    "docx",
    "html",
    "office",
    "word"
  ],
  "main": "./lib/index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/mwilliamson/mammoth.js.git"
  },
  "dependencies": {
    "q": "~0.9.2",
    "sax": "~0.5.2",
    "underscore": "~1.4.4",
    "lop": "~0.2.8",
    "unzip": "~0.1.7",
    "optimist": "~0.3.5",
    "connect": "~2.7.3",
    "dustjs-linkedin": "~1.2.1",
    "async": "~0.2.6",
    "buffers": "~0.1.1",
    "stream-buffers": "~0.2.4"
  },
  "devDependencies": {
    "mocha": "~1.8",
    "browserify": "~2.12.0",
    "license-sniffer": "~0.1.0",
    "duck": "~0.1.11"
  },
  "scripts": {
    "test": "mocha tests"
  },
  "licenses": [
    {
      "type": "BSD",
      "url": "http://opensource.org/licenses/BSD-2-Clause"
    }
  ],
  "readme": "# Mammoth .docx to HTML converter\n\nMammoth is designed to convert .docx documents,\nsuch as those created by Microsoft Word,\nand convert them to HTML.\nMammoth aims to produce simple and clean HTML by using semantic information in the document,\nand ignoring other details.\nFor instance,\nMammoth converts any paragraph with the style `Heading1` to `h1` elements,\nrather than attempting to exactly copy the styling (font, text size, colour, etc.) of the heading.\n\nThere's a large mismatch between the structure used by .docx and the structure of HTML,\nmeaning that the conversion is unlikely to be perfect for more complicated documents.\nMammoth works best if you only use styles to semantically mark up your document.\n\n## Installation\n\n    npm install mammoth\n    \n## Usage\n\n### Web interface\n\nThe easiest way to try out mammoth is to use the demo web server.\nYou can start it up by running `node lib/web.js` from the project directory.\n\n### API\n\nTo convert an existing .docx file to HTML, use `mammoth.convertToHtml`:\n\n```javascript\nvar mammoth = require(\"mammoth\");\n\nmammoth.convertToHtml({path: \"path/to/document.docx\"})\n    .then(function(result){\n        var html = result.value; // The generated HTML\n        var messages = result.messages; // Any messages, such as warnings during conversion\n    });\n```\n\nBy default,\nMammoth maps some common .docx styles to HTML elements.\nFor instance,\na paragraph with the style `Heading1` is converted to a `h1` element.\nYou can pass in a custom map for styles by passing an options object as a second argument to `convertToHtml`:\n\n```javascript\nvar mammoth = require(\"mammoth\");\nvar style = mammoth.style;\n\nvar options = {\n    styleMap: [\n        style(\"p.Heading1 => h1\"),\n        style(\"p.Heading2 => h2\")\n    ]\n};\nmammoth.convertToHtml({path: \"path/to/document.docx\"}, options);\n```\n\nTo extend the standard style map:\n\n```javascript\nvar mammoth = require(\"mammoth\");\nvar style = mammoth.style;\n\nvar customStyles = [\n    style(\"p.AsideHeading => div.aside > h2:fresh\"),\n    style(\"p.AsideText => div.aside > p:fresh\")\n];\n\nvar options = {\n    styleMap: customStyles.concat(mammoth.standardOptions.styleMap)\n};\nmammoth.convertToHtml({path: \"path/to/document.docx\"}, options);\n```\n\n## Writing styles\n\nA style has two parts:\n\n* On the left, before the arrow, is the document element matcher.\n* On the right, after the arrow, is the HTML path.\n\nWhen converting each paragraph,\nMammoth finds the first style where the document element matcher matches the current paragraph.\nMammoth then ensures the HTML path is satisfied.\n\n### Freshness\n\nWhen writing styles, it's helpful to understand Mammoth's notion of freshness.\nWhen generating, Mammoth will only close an HTML element when necessary.\nOtherwise, elements are reused.\n\nFor instance, suppose one of the specified styles is `p.Heading1 => h1`.\nIf Mammoth encounters a .docx paragraphs with the style `Heading1`,\nthe .docx paragraph is converted to a `h1` element with the same text.\nIf the next .docx paragraph also has the style `Heading1`,\nthen the text of that paragraph will be appended to the *existing* `h1` element,\nrather than creating a new `h1` element.\n\nIn most cases, you'll probably want to generate a new `h1` element instead.\nYou can specify this by using the `:fresh` modifier:\n\n`p.Heading1 => h1:fresh`\n\nThe two consective `Heading1` .docx paragraphs will then be converted to two separate `h1` elements.\n\nReusing elements is useful in generating more complicated HTML structures.\nFor instance, suppose your .docx contains asides.\nEach aside might have a heading and some body text,\nwhich should be contained within a single `div.aside` element.\nIn this case, styles similar to `p.AsideHeading => div.aside > h2:fresh` and\n`p.AsideText => div.aside > p:fresh` might be helpful.\n\n### Document element matchers\n\n#### Paragraphs and runs\n\nMatch any paragraph:\n\n```\np\n```\n\nMatch any run:\n\n```\nr\n```\n\nTo match a paragraph or run with a specific style name,\nappend a dot followed by the style name.\nFor instance, to match a paragraph with the style `Heading1`:\n\n```\np.Heading1\n```\n\n### HTML paths\n\n#### Single elements\n\nThe simplest HTML path is to specify a single element.\nFor instance, to specify an `h1` element:\n\n```\nh1\n```\n\nTo give an element a CSS class,\nappend a dot followed by the name of the class:\n\n```\nh1.section-title\n```\n\nTo require that an element is fresh, use `:fresh`:\n\n```\nh1:fresh\n```\n\nModifiers must be used in the correct order:\n\n```\nh1.section-title:fresh\n```\n\n#### Nested elements\n\nUse `>` to specify nested elements.\nFor instance, to specify `h2` within `div.aside`:\n\n```\ndiv.aside > h2\n```\n\nYou can nest elements to any depth.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mwilliamson/mammoth.js/issues"
  },
  "_id": "mammoth@0.1.5",
  "_from": "mammoth@"
}
